# Clean up the controller namespace
atrias_cm.resetControllerNames()

# Set up the component
import("atc_force_control_demo")
loadComponent("controller", "ATCForceControlDemo")

# Connect RTOps with this controller (so they can see each other's operations)
connectPeers("atrias_rt", "controller")

# ASCLegToMotorTransforms
require("legToMotorTransforms")
loadService("controller", "legToMotorTransforms")

# ASCHipBoomKinematics
import("asc_hip_boom_kinematics")
var string ascHipBoomKinematics0Name = atrias_cm.getUniqueName("controller", "ascHipBoomKinematics")
loadComponent(ascHipBoomKinematics0Name, "ASCHipBoomKinematics")
addPeer("controller", ascHipBoomKinematics0Name)
connectPeers("Deployer", ascHipBoomKinematics0Name)
controller.ascHipBoomKinematics0Name = ascHipBoomKinematics0Name

# ASCLegForceControl
import("asc_leg_force_control")
var string ascLegForceControl0Name = atrias_cm.getUniqueName("controller", "ascLegForceControl")
loadComponent(ascLegForceControl0Name, "ASCLegForceControl")
addPeer("controller", ascLegForceControl0Name)
connectPeers("Deployer", ascLegForceControl0Name)
controller.ascLegForceControl0Name = ascLegForceControl0Name

# Set up the gui connection
var ConnPolicy gui_policy
gui_policy.transport = 3
gui_policy.name_id = "/atc_force_control_demo_status"
stream("controller.gui_data_out", gui_policy)

gui_policy.name_id = "/atc_force_control_demo_input"
stream("controller.gui_data_in", gui_policy)

# Configure the component
controller.configure()

# Start the component
controller.start()
