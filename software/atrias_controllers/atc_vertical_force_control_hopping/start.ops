# Clean up the controller namespace
atrias_cm.resetControllerNames()

# Set up the component
import("atc_vertical_force_control_hopping")
loadComponent("controller", "ATCVerticalForceControlHopping")

# Connect RTOps with this controller (so they can see each other's operations)
connectPeers("atrias_rt", "controller")

# ASCLegToMotorTransforms
require("legToMotorTransforms")
loadService("controller", "legToMotorTransforms")

# ASCLegForce
require("ascLegForce")
loadService("controller", "ascLegForce")

# ASCHipInverseKinematics
require("ascHipInverseKinematics")
loadService("controller", "ascHipInverseKinematics")

# ASCHipBoomKinematics
import("asc_hip_boom_kinematics")
var string hip0Name = atrias_cm.getUniqueName("controller", "ascHipBoomKinematics")
loadComponent(hip0Name, "ASCHipBoomKinematics")
addPeer("controller", hip0Name)
connectPeers("Deployer", hip0Name)
controller.hip0Name = hip0Name

# ASCSlipModelSolver
require("ascSlipModelSolver")
loadService("controller", "ascSlipModelSolver")

# Set up the gui connection
var ConnPolicy gui_policy
gui_policy.transport = 3
gui_policy.name_id = "/atc_vertical_force_control_hopping_status"
stream("controller.gui_data_out", gui_policy)

gui_policy.name_id = "/atc_vertical_force_control_hopping_input"
stream("controller.gui_data_in", gui_policy)

# Configure the component
controller.configure()

# Start the component
controller.start()
